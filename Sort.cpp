// Sort.cpp
// C++20 File Organizer: Symbol, Interactive, Multilanguage & Full Help Translation

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <filesystem>
#include <fstream>
#include <sstream>
#include <chrono>
#include <ctime>
#include <iomanip>
#include <cstdint>
#include <map>
#include <array>
#include <random> 
#include <cctype> 

using namespace std;
namespace fs = std::filesystem;
using namespace std::chrono;

// =========================================================================
// 1. GLOBALE TAAL DEFINITIES EN FUNCTIES
// =========================================================================

using TranslationMap = std::map<std::string, std::string>;
using LanguageMap = std::map<std::string, TranslationMap>;

/**
 * De uitgebreide map met vertalingen voor de hoofdoutput, logs en help-berichten.
 * Bevat nl, en, de, fr, jp, ar, ru, tr, zh (voorheen ch).
 */
LanguageMap g_translations = {
    {"nl", {
        // Hoofdberichten
        {"MSG_START_ACTION", "START met actie: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è Pad niet gevonden: "},
        {"MSG_PROCESSING_DIR", "üìÇ Verwerken Map: "},
        {"MSG_FILE_FILTERED", "üö´ MIME GEFILTERD: "},
        {"MSG_COLLISION_TITLE", "üí• BESTANDSBOTSING DETECTEERD"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è Bron: "},
        {"MSG_COLLISION_DST", "üéØ Doel: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå BESTAAT AL"},
        {"MSG_COLLISION_PROMPT", "‚ùì Actie: [A]nnuleren, [O]verslaan, Overslaan [A]lle, [V]ervangen, Vervangen [A]lle: "},
        {"MSG_OVERWRITE_OK", "üîÑ Overschrijven gelukt."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è Overgeslagen (bestaat)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ Hernoemd om conflict te vermijden: "},
        {"MSG_CANCELED", "üö´ GEANNULEERD door gebruiker of geen bestanden verwerkt."},
        {"MSG_FINISHED", "‚úÖ VOLTOOID: "},
        {"MSG_FILES_PROCESSED", " bestanden verwerkt."},
        {"MSG_FATAL_ERROR", "üíÄ FATALE FOUT: "},
        {"MSG_UNKNOWN_OPT", "‚ùå FOUT: Onbekende optie/pad: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã Kopi√´ren"},
        {"MSG_MOVING", "üöö Verplaatsen"},
        {"MSG_DELETING", "üóëÔ∏è Verwijderen"},
        // Help Berichten
        {"MSG_USAGE", "Gebruik: ‚öôÔ∏è ./Sort [Acties] [Opties] [Pad...]\n"},
        {"MSG_ACTIONS", "\nACTIES (Standaard: --Test):\n"},
        {"MSG_OPTIONS", "\nOPTIES:\n"},
        {"MSG_COLLISION", "\nCONFLICT AFHANDELING:\n"},
        {"MSG_FEEDBACK", "\nFEEDBACK:\n"},
        {"MSG_DESC_TEST", "Alleen simulatie"},
        {"MSG_DESC_COPY", "Kopieer bestanden"},
        {"MSG_DESC_MOVE", "Verplaats bestanden"},
        {"MSG_DESC_DELETE", "Verwijder bestanden"},
        {"MSG_DESC_TYPE", "Filter op MIME-type, bijv. image/*"},
        {"MSG_DESC_EXTENSION", "Nieuwe bestandsnaamextensie-indeling"},
        {"MSG_DESC_RENAME", "Nieuwe bestandsnaam-stam indeling"},
        {"MSG_DESC_RECURSIVE", "Verwerk submappen"},
        {"MSG_DESC_LANG", "Stel de taal van de uitvoer in (bijv. nl, en)"},
        {"MSG_DESC_VERBOSE", "Gedetailleerde loguitvoer, standaard: EN"},
        {"MSG_DESC_VERBOSE_LANG", "Gedetailleerde loguitvoer in specifieke taal"},
        {"MSG_DESC_HELP", "Toon dit helpbericht"},
        {"MSG_DESC_HELP_LANG", "Toon dit helpbericht in specifieke taal"},
        {"MSG_DESC_REPLACE", "Batch alle doelen overschrijven"},
        {"MSG_DESC_SKIP", "Batch alle bestaande doelen overslaan"},
        {"MSG_DEFAULT_COLLISION", "Standaard: #Ô∏è‚É£ Nummering (Hernoem met -1, -2, etc.)"},
        {"MSG_DESC_QUIET", "Onderdruk alle uitvoer behalve fouten"},
        {"MSG_DESC_TBD", "Wordt bepaald (TBD)"}
    }},
    {"en", {
        // Hoofdberichten
        {"MSG_START_ACTION", "STARTING with action: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è Path not found: "},
        {"MSG_PROCESSING_DIR", "üìÇ Processing Dir: "},
        {"MSG_FILE_FILTERED", "üö´ MIME FILTERED: "},
        {"MSG_COLLISION_TITLE", "üí• FILE COLLISION DETECTED"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è Source: "},
        {"MSG_COLLISION_DST", "üéØ Target: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå EXISTS"},
        {"MSG_COLLISION_PROMPT", "‚ùì Action: [C]ancel, [S]kip, S[A]kip All, [R]eplace, R[L]eplace All: "},
        {"MSG_OVERWRITE_OK", "üîÑ Overwrite successful."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è Skipped (exists)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ Renamed to avoid conflict: "},
        {"MSG_CANCELED", "üö´ CANCELED by user or no files processed."},
        {"MSG_FINISHED", "‚úÖ FINISHED: "},
        {"MSG_FILES_PROCESSED", " files processed."},
        {"MSG_FATAL_ERROR", "üíÄ FATAL ERROR: "},
        {"MSG_UNKNOWN_OPT", "‚ùå ERROR: Unknown option/path: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã Copying"},
        {"MSG_MOVING", "üöö Moving"},
        {"MSG_DELETING", "üóëÔ∏è Deleting"},
        // Help Berichten
        {"MSG_USAGE", "Usage: ‚öôÔ∏è ./Sort [Actions] [Options] [Paths...]\n"},
        {"MSG_ACTIONS", "\nACTIONS (Default: --Test):\n"},
        {"MSG_OPTIONS", "\nOPTIONS:\n"},
        {"MSG_COLLISION", "\nCOLLISION HANDLING:\n"},
        {"MSG_FEEDBACK", "\nFEEDBACK:\n"},
        {"MSG_DESC_TEST", "Simulation only"},
        {"MSG_DESC_COPY", "Copy files"},
        {"MSG_DESC_MOVE", "Move files"},
        {"MSG_DESC_DELETE", "Delete files"},
        {"MSG_DESC_TYPE", "Filter by MIME-type, e.g., image/*"},
        {"MSG_DESC_EXTENSION", "New file extension format"},
        {"MSG_DESC_RENAME", "New file name stem format"},
        {"MSG_DESC_RECURSIVE", "Process subdirectories"},
        {"MSG_DESC_LANG", "Set the primary output language (e.g., nl, en)"},
        {"MSG_DESC_VERBOSE", "Detailed log output, default: EN"},
        {"MSG_DESC_VERBOSE_LANG", "Detailed log output in specific language"},
        {"MSG_DESC_HELP", "Show this help message"},
        {"MSG_DESC_HELP_LANG", "Show this help message in specific language"},
        {"MSG_DESC_REPLACE", "Batch overwrite all targets"},
        {"MSG_DESC_SKIP", "Batch skip all existing targets"},
        {"MSG_DEFAULT_COLLISION", "Default: #Ô∏è‚É£ Numbering (Rename file with -1, -2, etc.)"},
        {"MSG_DESC_QUIET", "Silence all output but errors"},
        {"MSG_DESC_TBD", "To Be Determined (TBD)"}
    }},
    {"de", {
        // Hoofdberichten
        {"MSG_START_ACTION", "START mit Aktion: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è Pfad nicht gefunden: "},
        {"MSG_PROCESSING_DIR", "üìÇ Verarbeite Verz: "},
        {"MSG_FILE_FILTERED", "üö´ MIME GEFILTERT: "},
        {"MSG_COLLISION_TITLE", "üí• DATEIKONFLIKT ERKANNT"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è Quelle: "},
        {"MSG_COLLISION_DST", "üéØ Ziel: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå EXISTIERT BEREITS"},
        {"MSG_COLLISION_PROMPT", "‚ùì Aktion: [A]bbrechen, [√ú]berspringen, √úberspringen [A]lle, [E]rsetzen, Ersetzen [L]le: "},
        {"MSG_OVERWRITE_OK", "üîÑ Ersetzen erfolgreich."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è √úbersprungen (existiert)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ Umbenannt zur Konfliktvermeidung: "},
        {"MSG_CANCELED", "üö´ ABGEBROCHEN oder keine Dateien verarbeitet."},
        {"MSG_FINISHED", "‚úÖ BEENDET: "},
        {"MSG_FILES_PROCESSED", " Dateien verarbeitet."},
        {"MSG_FATAL_ERROR", "üíÄ FATALER FEHLER: "},
        {"MSG_UNKNOWN_OPT", "‚ùå FEHLER: Unbekannte Option/Pfad: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã Kopieren"},
        {"MSG_MOVING", "üöö Verschieben"},
        {"MSG_DELETING", "üóëÔ∏è L√∂schen"},
        // Help Berichten
        {"MSG_USAGE", "Benutzung: ‚öôÔ∏è ./Sort [Aktionen] [Optionen] [Pfad...]\n"},
        {"MSG_ACTIONS", "\nAKTIONEN (Standard: --Test):\n"},
        {"MSG_OPTIONS", "\nOPTIONEN:\n"},
        {"MSG_COLLISION", "\nKONFLIKT HANDHABUNG:\n"},
        {"MSG_FEEDBACK", "\nFEEDBACK:\n"},
        {"MSG_DESC_TEST", "Nur Simulation"},
        {"MSG_DESC_COPY", "Dateien kopieren"},
        {"MSG_DESC_MOVE", "Dateien verschieben"},
        {"MSG_DESC_DELETE", "Dateien l√∂schen"},
        {"MSG_DESC_TYPE", "Nach MIME-Typ filtern, z.B. image/*"},
        {"MSG_DESC_EXTENSION", "Neues Dateierweiterungsformat"},
        {"MSG_DESC_RENAME", "Neues Dateinamenstammformat"},
        {"MSG_DESC_RECURSIVE", "Unterverzeichnisse verarbeiten"},
        {"MSG_DESC_LANG", "Ausgabesprache einstellen (z.B. nl, en)"},
        {"MSG_DESC_VERBOSE", "Detaillierte Protokollausgabe, Standard: EN"},
        {"MSG_DESC_VERBOSE_LANG", "Detaillierte Protokollausgabe in bestimmter Sprache"},
        {"MSG_DESC_HELP", "Diese Hilfe anzeigen"},
        {"MSG_DESC_HELP_LANG", "Diese Hilfe in bestimmter Sprache anzeigen"},
        {"MSG_DESC_REPLACE", "Alle Ziele im Batch √ºberschreiben"},
        {"MSG_DESC_SKIP", "Alle vorhandenen Ziele im Batch √ºberspringen"},
        {"MSG_DEFAULT_COLLISION", "Standard: #Ô∏è‚É£ Nummerierung (Umbenennen mit -1, -2, etc.)"},
        {"MSG_DESC_QUIET", "Alle Ausgaben au√üer Fehler unterdr√ºcken"},
        {"MSG_DESC_TBD", "Wird noch festgelegt (TBD)"}
    }},
    {"fr", {
        // Hoofdberichten
        {"MSG_START_ACTION", "D√âMARRAGE avec l'action: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è Chemin non trouv√©: "},
        {"MSG_PROCESSING_DIR", "üìÇ Traitement du R√©p: "},
        {"MSG_FILE_FILTERED", "üö´ MIME FILTR√â: "},
        {"MSG_COLLISION_TITLE", "üí• COLLISION DE FICHIER D√âTECT√âE"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è Source: "},
        {"MSG_COLLISION_DST", "üéØ Cible: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå EXISTE D√âJ√Ä"},
        {"MSG_COLLISION_PROMPT", "‚ùì Action: [A]nnuler, [I]gnorer, I[G]norer tout, [R]emplacer, Remplacer [T]out: "},
        {"MSG_OVERWRITE_OK", "üîÑ Remplacement r√©ussi."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è Ignor√© (existe)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ Renomm√© pour √©viter le conflit: "},
        {"MSG_CANCELED", "üö´ ANNUL√â par l'utilisateur ou aucun fichier trait√©."},
        {"MSG_FINISHED", "‚úÖ TERMIN√â: "},
        {"MSG_FILES_PROCESSED", " fichiers trait√©s."},
        {"MSG_FATAL_ERROR", "üíÄ ERREUR FATALE: "},
        {"MSG_UNKNOWN_OPT", "‚ùå ERREUR: Option/chemin inconnu: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã Copie"},
        {"MSG_MOVING", "üöö D√©placement"},
        {"MSG_DELETING", "üóëÔ∏è Suppression"},
        // Help Berichten
        {"MSG_USAGE", "Utilisation: ‚öôÔ∏è ./Sort [Actions] [Options] [Chemins...]\n"},
        {"MSG_ACTIONS", "\nACTIONS (D√©faut: --Test):\n"},
        {"MSG_OPTIONS", "\nOPTIONS:\n"},
        {"MSG_COLLISION", "\nGESTION DES COLLISIONS:\n"},
        {"MSG_FEEDBACK", "\nCOMMENTAIRES:\n"},
        {"MSG_DESC_TEST", "Simulation seulement"},
        {"MSG_DESC_COPY", "Copier les fichiers"},
        {"MSG_DESC_MOVE", "D√©placer les fichiers"},
        {"MSG_DESC_DELETE", "Supprimer les fichiers"},
        {"MSG_DESC_TYPE", "Filtrer par type MIME, ex. image/*"},
        {"MSG_DESC_EXTENSION", "Nouveau format d'extension de nom de fichier"},
        {"MSG_DESC_RENAME", "Nouveau format de nom de fichier souche"},
        {"MSG_DESC_RECURSIVE", "Traiter les sous-r√©pertoires"},
        {"MSG_DESC_LANG", "D√©finir la langue de sortie principale (ex. nl, en)"},
        {"MSG_DESC_VERBOSE", "Sortie de journal d√©taill√©e, par d√©faut: EN"},
        {"MSG_DESC_VERBOSE_LANG", "Sortie de journal d√©taill√©e dans une langue sp√©cifique"},
        {"MSG_DESC_HELP", "Afficher ce message d'aide"},
        {"MSG_DESC_HELP_LANG", "Afficher ce message d'aide dans une langue sp√©cifique"},
        {"MSG_DESC_REPLACE", "Remplacer toutes les cibles par lot"},
        {"MSG_DESC_SKIP", "Ignorer toutes les cibles existantes par lot"},
        {"MSG_DEFAULT_COLLISION", "D√©faut: #Ô∏è‚É£ Num√©rotation (Renommer le fichier avec -1, -2, etc.)"},
        {"MSG_DESC_QUIET", "Masquer toutes les sorties sauf les erreurs"},
        {"MSG_DESC_TBD", "√Ä D√©terminer (TBD)"}
    }},
    {"jp", { // Japans
        // Hoofdberichten
        {"MSG_START_ACTION", "Âá¶ÁêÜ„ÇíÈñãÂßã: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è „Éë„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: "},
        {"MSG_PROCESSING_DIR", "üìÇ „Éá„Ç£„É¨„ÇØ„Éà„É™Âá¶ÁêÜ‰∏≠: "},
        {"MSG_FILE_FILTERED", "üö´ MIME„Éï„Ç£„É´„Çø„É™„É≥„Ç∞: "},
        {"MSG_COLLISION_TITLE", "üí• „Éï„Ç°„Ç§„É´„ÅÆË°ùÁ™Å„ÇíÊ§úÂá∫"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è „ÇΩ„Éº„Çπ: "},
        {"MSG_COLLISION_DST", "üéØ „Çø„Éº„Ç≤„ÉÉ„Éà: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå Êó¢„Å´Â≠òÂú®„Åó„Åæ„Åô"},
        {"MSG_COLLISION_PROMPT", "‚ùì „Ç¢„ÇØ„Ç∑„Éß„É≥: [C]ancel, [S]kip, S[A]kip All, [R]eplace, R[L]eplace All: "},
        {"MSG_OVERWRITE_OK", "üîÑ ‰∏äÊõ∏„ÅçÊàêÂäü„ÄÇ"},
        {"MSG_SKIP_OK", "‚è≠Ô∏è „Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü (Êó¢Â≠ò)„ÄÇ"},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ Ë°ùÁ™ÅÂõûÈÅø„ÅÆ„Åü„ÇÅÂêçÂâç„ÇíÂ§âÊõ¥: "},
        {"MSG_CANCELED", "üö´ „É¶„Éº„Ç∂„Éº„Å´„Çà„Çä„Ç≠„É£„É≥„Çª„É´„Åæ„Åü„ÅØ„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Å™„Åó„ÄÇ"},
        {"MSG_FINISHED", "‚úÖ ÂÆå‰∫Ü: "},
        {"MSG_FILES_PROCESSED", " „Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ„Åó„Åæ„Åó„Åü„ÄÇ"},
        {"MSG_FATAL_ERROR", "üíÄ Ëá¥ÂëΩÁöÑ„Å™„Ç®„É©„Éº: "},
        {"MSG_UNKNOWN_OPT", "‚ùå „Ç®„É©„Éº: ‰∏çÊòé„Å™„Ç™„Éó„Ç∑„Éß„É≥/„Éë„Çπ: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã „Ç≥„Éî„Éº‰∏≠"},
        {"MSG_MOVING", "üöö ÁßªÂãï‰∏≠"},
        {"MSG_DELETING", "üóëÔ∏è ÂâäÈô§‰∏≠"},
        // Help Berichten
        {"MSG_USAGE", "‰ΩøÁî®Ê≥ï: ‚öôÔ∏è ./Sort [„Ç¢„ÇØ„Ç∑„Éß„É≥] [„Ç™„Éó„Ç∑„Éß„É≥] [„Éë„Çπ...]\n"},
        {"MSG_ACTIONS", "\n„Ç¢„ÇØ„Ç∑„Éß„É≥ („Éá„Éï„Ç©„É´„Éà: --Test):\n"},
        {"MSG_OPTIONS", "\n„Ç™„Éó„Ç∑„Éß„É≥:\n"},
        {"MSG_COLLISION", "\nË°ùÁ™ÅÂá¶ÁêÜ:\n"},
        {"MSG_FEEDBACK", "\n„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ:\n"},
        {"MSG_DESC_TEST", "„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åø"},
        {"MSG_DESC_COPY", "„Éï„Ç°„Ç§„É´„Çí„Ç≥„Éî„Éº"},
        {"MSG_DESC_MOVE", "„Éï„Ç°„Ç§„É´„ÇíÁßªÂãï"},
        {"MSG_DESC_DELETE", "„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§"},
        {"MSG_DESC_TYPE", "MIME„Çø„Ç§„Éó„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞, ‰æã: image/*"},
        {"MSG_DESC_EXTENSION", "Êñ∞„Åó„ÅÑ„Éï„Ç°„Ç§„É´Êã°ÂºµÂ≠êÂΩ¢Âºè"},
        {"MSG_DESC_RENAME", "Êñ∞„Åó„ÅÑ„Éï„Ç°„Ç§„É´Âêç„Çπ„ÉÜ„É†ÂΩ¢Âºè"},
        {"MSG_DESC_RECURSIVE", "„Çµ„Éñ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂá¶ÁêÜ"},
        {"MSG_DESC_LANG", "‰∏ªË¶Å„Å™Âá∫ÂäõË®ÄË™û„ÇíË®≠ÂÆö (‰æã: nl, en)"},
        {"MSG_DESC_VERBOSE", "Ë©≥Á¥∞„Å™„É≠„Ç∞Âá∫Âäõ, „Éá„Éï„Ç©„É´„Éà: EN"},
        {"MSG_DESC_VERBOSE_LANG", "ÁâπÂÆö„ÅÆË®ÄË™û„Åß„ÅÆË©≥Á¥∞„Å™„É≠„Ç∞Âá∫Âäõ"},
        {"MSG_DESC_HELP", "„Åì„ÅÆ„Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫"},
        {"MSG_DESC_HELP_LANG", "ÁâπÂÆö„ÅÆË®ÄË™û„Åß„Åì„ÅÆ„Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫"},
        {"MSG_DESC_REPLACE", "„Åô„Åπ„Å¶„ÅÆ‰∏ÄÊã¨‰∏äÊõ∏„Åç"},
        {"MSG_DESC_SKIP", "„Åô„Åπ„Å¶„ÅÆÊó¢Â≠ò„Çø„Éº„Ç≤„ÉÉ„Éà„Çí‰∏ÄÊã¨„Çπ„Ç≠„ÉÉ„Éó"},
        {"MSG_DEFAULT_COLLISION", "„Éá„Éï„Ç©„É´„Éà: #Ô∏è‚É£ „Éä„É≥„Éê„É™„É≥„Ç∞ (-1, -2 „Å™„Å©„Åß„É™„Éç„Éº„É†)"},
        {"MSG_DESC_QUIET", "„Ç®„É©„Éº„ÇíÈô§„Åè„Åô„Åπ„Å¶„ÅÆÂá∫Âäõ„ÇíÊäëÂà∂"},
        {"MSG_DESC_TBD", "Êú™ÂÆö (TBD)"}
    }},
    {"ar", { // Arabisch
        // Hoofdberichten
        {"MSG_START_ACTION", "ÿ®ÿØÿ° ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è ÿßŸÑŸÖÿ≥ÿßÿ± ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ: "},
        {"MSG_PROCESSING_DIR", "üìÇ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿØŸÑŸäŸÑ: "},
        {"MSG_FILE_FILTERED", "üö´ MIME ÿ™ŸÖÿ™ ÿßŸÑÿ™ÿµŸÅŸäÿ©: "},
        {"MSG_COLLISION_TITLE", "üí• ÿ™ŸÖ ÿßŸÉÿ™ÿ¥ÿßŸÅ ÿ™ÿπÿßÿ±ÿ∂ ŸÅŸä ÿßŸÑŸÖŸÑŸÅÿßÿ™"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è ÿßŸÑŸÖÿµÿØÿ±: "},
        {"MSG_COLLISION_DST", "üéØ ÿßŸÑŸáÿØŸÅ: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßŸÑŸÅÿπŸÑ"},
        {"MSG_COLLISION_PROMPT", "‚ùì ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°: [C]ancel, [S]kip, S[A]kip All, [R]eplace, R[L]eplace All: "},
        {"MSG_OVERWRITE_OK", "üîÑ ÿ™ŸÖ ÿßŸÑÿ™ÿ¨ÿßŸàÿ≤ ÿ®ŸÜÿ¨ÿßÿ≠."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è ÿ™ŸÖ ÿßŸÑÿ™ÿÆÿ∑Ÿä (ŸÖŸàÿ¨ŸàÿØ)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ ÿ™ŸÖÿ™ ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ÿ≥ŸÖŸäÿ© ŸÑÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ÿπÿßÿ±ÿ∂: "},
        {"MSG_CANCELED", "üö´ ÿ™ŸÖ ÿßŸÑÿ•ŸÑÿ∫ÿßÿ° ÿ®Ÿàÿßÿ≥ÿ∑ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ£Ÿà ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖŸÑŸÅÿßÿ™ ÿ™ŸÖÿ™ ŸÖÿπÿßŸÑÿ¨ÿ™Ÿáÿß."},
        {"MSG_FINISHED", "‚úÖ ÿßŸÜÿ™ŸáŸâ: "},
        {"MSG_FILES_PROCESSED", " ŸÖŸÑŸÅ ÿ™ŸÖÿ™ ŸÖÿπÿßŸÑÿ¨ÿ™Ÿá."},
        {"MSG_FATAL_ERROR", "üíÄ ÿÆÿ∑ÿ£ ŸÅÿßÿØÿ≠: "},
        {"MSG_UNKNOWN_OPT", "‚ùå ÿÆÿ∑ÿ£: ÿÆŸäÿßÿ±/ŸÖÿ≥ÿßÿ± ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã ŸÜÿ≥ÿÆ"},
        {"MSG_MOVING", "üöö ŸÜŸÇŸÑ"},
        {"MSG_DELETING", "üóëÔ∏è ÿ≠ÿ∞ŸÅ"},
        // Help Berichten
        {"MSG_USAGE", "ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: ‚öôÔ∏è ./Sort [ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™] [ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™] [ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™...]\n"},
        {"MSG_ACTIONS", "\nÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ (ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä: --Test):\n"},
        {"MSG_OPTIONS", "\nÿßŸÑÿÆŸäÿßÿ±ÿßÿ™:\n"},
        {"MSG_COLLISION", "\nŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ™ÿπÿßÿ±ÿ∂:\n"},
        {"MSG_FEEDBACK", "\nÿßŸÑÿ™ÿ∫ÿ∞Ÿäÿ© ÿßŸÑÿ±ÿßÿ¨ÿπÿ©:\n"},
        {"MSG_DESC_TEST", "ŸÖÿ≠ÿßŸÉÿßÿ© ŸÅŸÇÿ∑"},
        {"MSG_DESC_COPY", "ŸÜÿ≥ÿÆ ÿßŸÑŸÖŸÑŸÅÿßÿ™"},
        {"MSG_DESC_MOVE", "ŸÜŸÇŸÑ ÿßŸÑŸÖŸÑŸÅÿßÿ™"},
        {"MSG_DESC_DELETE", "ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÑŸÅÿßÿ™"},
        {"MSG_DESC_TYPE", "ÿßŸÑÿ™ÿµŸÅŸäÿ© ÿ≠ÿ≥ÿ® ŸÜŸàÿπ MIMEÿå ÿπŸÑŸâ ÿ≥ÿ®ŸäŸÑ ÿßŸÑŸÖÿ´ÿßŸÑ image/*"},
        {"MSG_DESC_EXTENSION", "ÿ™ŸÜÿ≥ŸäŸÇ ŸÖŸÑÿ≠ŸÇ ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¨ÿØŸäÿØ"},
        {"MSG_DESC_RENAME", "ÿ™ŸÜÿ≥ŸäŸÇ ÿ¨ÿ∞ÿ± ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¨ÿØŸäÿØ"},
        {"MSG_DESC_RECURSIVE", "ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ£ÿØŸÑÿ© ÿßŸÑŸÅÿ±ÿπŸäÿ©"},
        {"MSG_DESC_LANG", "ÿ™ÿπŸäŸäŸÜ ŸÑÿ∫ÿ© ÿßŸÑÿ•ÿÆÿ±ÿßÿ¨ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© (ÿπŸÑŸâ ÿ≥ÿ®ŸäŸÑ ÿßŸÑŸÖÿ´ÿßŸÑ nl, en)"},
        {"MSG_DESC_VERBOSE", "ÿ•ÿÆÿ±ÿßÿ¨ ÿ≥ÿ¨ŸÑ ŸÖŸÅÿµŸÑÿå ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä: EN"},
        {"MSG_DESC_VERBOSE_LANG", "ÿ•ÿÆÿ±ÿßÿ¨ ÿ≥ÿ¨ŸÑ ŸÖŸÅÿµŸÑ ÿ®ŸÑÿ∫ÿ© ŸÖÿ≠ÿØÿØÿ©"},
        {"MSG_DESC_HELP", "ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© Ÿáÿ∞Ÿá"},
        {"MSG_DESC_HELP_LANG", "ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© Ÿáÿ∞Ÿá ÿ®ŸÑÿ∫ÿ© ŸÖÿ≠ÿØÿØÿ©"},
        {"MSG_DESC_REPLACE", "ÿ™ÿ¨ÿßŸàÿ≤ ŸÉÿßŸÅÿ© ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿØŸÅÿπÿ© Ÿàÿßÿ≠ÿØÿ©"},
        {"MSG_DESC_SKIP", "ÿ™ÿÆÿ∑Ÿä ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ© ÿØŸÅÿπÿ© Ÿàÿßÿ≠ÿØÿ©"},
        {"MSG_DEFAULT_COLLISION", "ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä: #Ô∏è‚É£ ÿ™ÿ±ŸÇŸäŸÖ (ÿ•ÿπÿßÿØÿ© ÿ™ÿ≥ŸÖŸäÿ© ÿßŸÑŸÖŸÑŸÅ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ -1ÿå -2ÿå ÿ•ŸÑÿÆ)"},
        {"MSG_DESC_QUIET", "ÿ•ÿ≥ŸÉÿßÿ™ ŸÉŸÑ ÿßŸÑŸÖÿÆÿ±ÿ¨ÿßÿ™ ŸÖÿß ÿπÿØÿß ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°"},
        {"MSG_DESC_TBD", "ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿØŸá ŸÑÿßÿ≠ŸÇŸãÿß (TBD)"}
    }},
    {"ru", { // Russisch
        // Hoofdberichten
        {"MSG_START_ACTION", "–ù–ê–ß–ê–õ–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: "},
        {"MSG_PROCESSING_DIR", "üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: "},
        {"MSG_FILE_FILTERED", "üö´ MIME –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: "},
        {"MSG_COLLISION_TITLE", "üí• –û–ë–ù–ê–†–£–ñ–ï–ù–û –ö–û–ù–§–õ–ò–ö–¢ –§–ê–ô–õ–û–í"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: "},
        {"MSG_COLLISION_DST", "üéØ –¶–µ–ª—å: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢"},
        {"MSG_COLLISION_PROMPT", "‚ùì –î–µ–π—Å—Ç–≤–∏–µ: [–û]—Ç–º–µ–Ω–∞, [–ü]—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –ü—Ä[–ê]–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ, [–ó]–∞–º–µ–Ω–∏—Ç—å, –ó–∞–º–µ[–ù]–∏—Ç—å –≤—Å–µ: "},
        {"MSG_OVERWRITE_OK", "üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: "},
        {"MSG_CANCELED", "üö´ –û–¢–ú–ï–ù–ï–ù–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."},
        {"MSG_FINISHED", "‚úÖ –ó–ê–í–ï–†–®–ï–ù–û: "},
        {"MSG_FILES_PROCESSED", " —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ."},
        {"MSG_FATAL_ERROR", "üíÄ –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: "},
        {"MSG_UNKNOWN_OPT", "‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è/–ø—É—Ç—å: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"},
        {"MSG_MOVING", "üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ"},
        {"MSG_DELETING", "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ"},
        // Help Berichten
        {"MSG_USAGE", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ‚öôÔ∏è ./Sort [–î–µ–π—Å—Ç–≤–∏—è] [–û–ø—Ü–∏–∏] [–ü—É—Ç–∏...]\n"},
        {"MSG_ACTIONS", "\n–î–ï–ô–°–¢–í–ò–Ø (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: --Test):\n"},
        {"MSG_OPTIONS", "\n–û–ü–¶–ò–ò:\n"},
        {"MSG_COLLISION", "\n–û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í:\n"},
        {"MSG_FEEDBACK", "\n–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨:\n"},
        {"MSG_DESC_TEST", "–¢–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è"},
        {"MSG_DESC_COPY", "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã"},
        {"MSG_DESC_MOVE", "–ü–µ—Ä–µ–º–µ—â–∞—Ç—å —Ñ–∞–π–ª—ã"},
        {"MSG_DESC_DELETE", "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã"},
        {"MSG_DESC_TYPE", "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–∏–ø—É MIME, –Ω–∞–ø—Ä–∏–º–µ—Ä image/*"},
        {"MSG_DESC_EXTENSION", "–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"},
        {"MSG_DESC_RENAME", "–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Å–Ω–æ–≤—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"},
        {"MSG_DESC_RECURSIVE", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏"},
        {"MSG_DESC_LANG", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, nl, en)"},
        {"MSG_DESC_VERBOSE", "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∂—É—Ä–Ω–∞–ª–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: EN"},
        {"MSG_DESC_VERBOSE_LANG", "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∂—É—Ä–Ω–∞–ª–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"},
        {"MSG_DESC_HELP", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"},
        {"MSG_DESC_HELP_LANG", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"},
        {"MSG_DESC_REPLACE", "–ü–∞–∫–µ—Ç–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤—Å–µ—Ö —Ü–µ–ª–µ–π"},
        {"MSG_DESC_SKIP", "–ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ü–µ–ª–µ–π"},
        {"MSG_DEFAULT_COLLISION", "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: #Ô∏è‚É£ –ù—É–º–µ—Ä–∞—Ü–∏—è (–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å -1, -2 –∏ —Ç.–¥.)"},
        {"MSG_DESC_QUIET", "–ü–æ–¥–∞–≤–ª—è—Ç—å –≤–µ—Å—å –≤—ã–≤–æ–¥, –∫—Ä–æ–º–µ –æ—à–∏–±–æ–∫"},
        {"MSG_DESC_TBD", "–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (TBD)"}
    }},
    {"tr", { // Turks
        // Hoofdberichten
        {"MSG_START_ACTION", "ƒ∞≈ûLEME BA≈ûLANIYOR: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è Yol bulunamadƒ±: "},
        {"MSG_PROCESSING_DIR", "üìÇ Dizin ƒ∞≈üleniyor: "},
        {"MSG_FILE_FILTERED", "üö´ MIME Fƒ∞LTRELENDƒ∞: "},
        {"MSG_COLLISION_TITLE", "üí• DOSYA √áAKI≈ûMASI TESPƒ∞T EDƒ∞LDƒ∞"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è Kaynak: "},
        {"MSG_COLLISION_DST", "üéØ Hedef: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå ZATEN MEVCUT"},
        {"MSG_COLLISION_PROMPT", "‚ùì Eylem: [ƒ∞]ptal, [A]tla, Hepsini [A]tla, [Y]az, T√ºm√ºn√º [Y]az: "},
        {"MSG_OVERWRITE_OK", "üîÑ √úzerine yazma ba≈üarƒ±lƒ±."},
        {"MSG_SKIP_OK", "‚è≠Ô∏è Atlandƒ± (mevcut)."},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ √áakƒ±≈ümayƒ± √∂nlemek i√ßin yeniden adlandƒ±rƒ±ldƒ±: "},
        {"MSG_CANCELED", "üö´ Kullanƒ±cƒ± tarafƒ±ndan ƒ∞PTAL EDƒ∞LDƒ∞ veya dosya i≈ülenmedi."},
        {"MSG_FINISHED", "‚úÖ TAMAMLANDI: "},
        {"MSG_FILES_PROCESSED", " dosya i≈ülendi."},
        {"MSG_FATAL_ERROR", "üíÄ KRƒ∞Tƒ∞K HATA: "},
        {"MSG_UNKNOWN_OPT", "‚ùå HATA: Bilinmeyen se√ßenek/yol: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã Kopyalanƒ±yor"},
        {"MSG_MOVING", "üöö Ta≈üƒ±nƒ±yor"},
        {"MSG_DELETING", "üóëÔ∏è Siliniyor"},
        // Help Berichten
        {"MSG_USAGE", "Kullanƒ±m: ‚öôÔ∏è ./Sort [Eylemler] [Se√ßenekler] [Yollar...]\n"},
        {"MSG_ACTIONS", "\nEYLEMLER (Varsayƒ±lan: --Test):\n"},
        {"MSG_OPTIONS", "\nSE√áENEKLER:\n"},
        {"MSG_COLLISION", "\n√áAKI≈ûMA ƒ∞≈ûLEMESƒ∞:\n"},
        {"MSG_FEEDBACK", "\nGERƒ∞ Bƒ∞LDƒ∞Rƒ∞M:\n"},
        {"MSG_DESC_TEST", "Yalnƒ±zca sim√ºlasyon"},
        {"MSG_DESC_COPY", "Dosyalarƒ± kopyala"},
        {"MSG_DESC_MOVE", "Dosyalarƒ± ta≈üƒ±"},
        {"MSG_DESC_DELETE", "Dosyalarƒ± sil"},
        {"MSG_DESC_TYPE", "MIME t√ºr√ºne g√∂re filtrele, √∂rn. image/*"},
        {"MSG_DESC_EXTENSION", "Yeni dosya uzantƒ±sƒ± formatƒ±"},
        {"MSG_DESC_RENAME", "Yeni dosya adƒ± k√∂k formatƒ±"},
        {"MSG_DESC_RECURSIVE", "Alt dizinleri i≈üle"},
        {"MSG_DESC_LANG", "Birincil √ßƒ±ktƒ± dilini ayarla (√∂rn. nl, en)"},
        {"MSG_DESC_VERBOSE", "Ayrƒ±ntƒ±lƒ± g√ºnl√ºk √ßƒ±ktƒ±sƒ±, varsayƒ±lan: EN"},
        {"MSG_DESC_VERBOSE_LANG", "Belirli dilde ayrƒ±ntƒ±lƒ± g√ºnl√ºk √ßƒ±ktƒ±sƒ±"},
        {"MSG_DESC_HELP", "Bu yardƒ±m mesajƒ±nƒ± g√∂ster"},
        {"MSG_DESC_HELP_LANG", "Bu yardƒ±m mesajƒ±nƒ± belirli dilde g√∂ster"},
        {"MSG_DESC_REPLACE", "T√ºm hedefleri toplu olarak √ºzerine yaz"},
        {"MSG_DESC_SKIP", "Mevcut t√ºm hedefleri toplu olarak atla"},
        {"MSG_DEFAULT_COLLISION", "Varsayƒ±lan: #Ô∏è‚É£ Numaralandƒ±rma (-1, -2 vb. ile yeniden adlandƒ±r)"},
        {"MSG_DESC_QUIET", "Hatalar dƒ±≈üƒ±ndaki t√ºm √ßƒ±ktƒ±larƒ± sustur"},
        {"MSG_DESC_TBD", "Belirlenecek (TBD)"}
    }},
    {"zh", { // Chinees (Mandarijn, Vereenvoudigd)
        // Hoofdberichten
        {"MSG_START_ACTION", "ÂºÄÂßãÊâßË°åÊìç‰Ωú: "},
        {"MSG_PATH_NOT_FOUND", "‚ö†Ô∏è Ë∑ØÂæÑÊú™ÊâæÂà∞: "},
        {"MSG_PROCESSING_DIR", "üìÇ Ê≠£Âú®Â§ÑÁêÜÁõÆÂΩï: "},
        {"MSG_FILE_FILTERED", "üö´ MIME Â∑≤ËøáÊª§: "},
        {"MSG_COLLISION_TITLE", "üí• Ê£ÄÊµãÂà∞Êñá‰ª∂ÂÜ≤Á™Å"},
        {"MSG_COLLISION_SRC", "‚û°Ô∏è Ê∫ê: "},
        {"MSG_COLLISION_DST", "üéØ ÁõÆÊ†á: "},
        {"MSG_COLLISION_EXISTS", " ‚ùå Â∑≤Â≠òÂú®"},
        {"MSG_COLLISION_PROMPT", "‚ùì Êìç‰Ωú: [C]ancel, [S]kip, S[A]kip All, [R]eplace, R[L]eplace All: "},
        {"MSG_OVERWRITE_OK", "üîÑ Ë¶ÜÁõñÊàêÂäü„ÄÇ"},
        {"MSG_SKIP_OK", "‚è≠Ô∏è Â∑≤Ë∑≥Ëøá (Â∑≤Â≠òÂú®)„ÄÇ"},
        {"MSG_RENAME_OK", "#Ô∏è‚É£ ‰∏∫ÈÅøÂÖçÂÜ≤Á™ÅÂ∑≤ÈáçÂëΩÂêç: "},
        {"MSG_CANCELED", "üö´ Ë¢´Áî®Êà∑ÂèñÊ∂àÊàñÊú™Â§ÑÁêÜ‰ªª‰ΩïÊñá‰ª∂„ÄÇ"},
        {"MSG_FINISHED", "‚úÖ ÂÆåÊàê: "},
        {"MSG_FILES_PROCESSED", " ‰∏™Êñá‰ª∂Â∑≤Â§ÑÁêÜ„ÄÇ"},
        {"MSG_FATAL_ERROR", "üíÄ Ëá¥ÂëΩÈîôËØØ: "},
        {"MSG_UNKNOWN_OPT", "‚ùå ÈîôËØØ: Êú™Áü•ÈÄâÈ°π/Ë∑ØÂæÑ: "},
        // Log/Actie Beschrijvingen
        {"MSG_COPYING", "üìã Â§çÂà∂‰∏≠"},
        {"MSG_MOVING", "üöö ÁßªÂä®‰∏≠"},
        {"MSG_DELETING", "üóëÔ∏è Âà†Èô§‰∏≠"},
        // Help Berichten
        {"MSG_USAGE", "Áî®Ê≥ï: ‚öôÔ∏è ./Sort [Êìç‰Ωú] [ÈÄâÈ°π] [Ë∑ØÂæÑ...]\n"},
        {"MSG_ACTIONS", "\nÊìç‰Ωú (ÈªòËÆ§: --Test):\n"},
        {"MSG_OPTIONS", "\nÈÄâÈ°π:\n"},
        {"MSG_COLLISION", "\nÂÜ≤Á™ÅÂ§ÑÁêÜ:\n"},
        {"MSG_FEEDBACK", "\nÂèçÈ¶à:\n"},
        {"MSG_DESC_TEST", "‰ªÖÊ®°Êãü"},
        {"MSG_DESC_COPY", "Â§çÂà∂Êñá‰ª∂"},
        {"MSG_DESC_MOVE", "ÁßªÂä®Êñá‰ª∂"},
        {"MSG_DESC_DELETE", "Âà†Èô§Êñá‰ª∂"},
        {"MSG_DESC_TYPE", "Êåâ MIME Á±ªÂûãËøáÊª§, ‰æãÂ¶Ç image/*"},
        {"MSG_DESC_EXTENSION", "Êñ∞Êñá‰ª∂Êâ©Â±ïÂêçÊ†ºÂºè"},
        {"MSG_DESC_RENAME", "Êñ∞Êñá‰ª∂ÂêçËØçÂπ≤Ê†ºÂºè"},
        {"MSG_DESC_RECURSIVE", "Â§ÑÁêÜÂ≠êÁõÆÂΩï"},
        {"MSG_DESC_LANG", "ËÆæÁΩÆ‰∏ªË¶ÅËæìÂá∫ËØ≠Ë®Ä (‰æãÂ¶Ç nl, en)"},
        {"MSG_DESC_VERBOSE", "ËØ¶ÁªÜÊó•ÂøóËæìÂá∫, ÈªòËÆ§: EN"},
        {"MSG_DESC_VERBOSE_LANG", "ÁâπÂÆöËØ≠Ë®ÄÁöÑËØ¶ÁªÜÊó•ÂøóËæìÂá∫"},
        {"MSG_DESC_HELP", "ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"},
        {"MSG_DESC_HELP_LANG", "ÊòæÁ§∫ÁâπÂÆöËØ≠Ë®ÄÁöÑÂ∏ÆÂä©‰ø°ÊÅØ"},
        {"MSG_DESC_REPLACE", "ÊâπÈáèË¶ÜÁõñÊâÄÊúâÁõÆÊ†á"},
        {"MSG_DESC_SKIP", "ÊâπÈáèË∑≥ËøáÊâÄÊúâÁé∞ÊúâÁõÆÊ†á"},
        {"MSG_DEFAULT_COLLISION", "ÈªòËÆ§: #Ô∏è‚É£ ÁºñÂè∑ (-1, -2 Á≠âÈáçÂëΩÂêç)"},
        {"MSG_DESC_QUIET", "Èô§ÈîôËØØÂ§ñ, ÈùôÈªòÊâÄÊúâËæìÂá∫"},
        {"MSG_DESC_TBD", "ÂæÖÂÆö (TBD)"}
    }}
    // ... (Andere talen zouden hier volgen)
};

std::string g_current_lang = "nl"; 

/**
 * Zoek de vertaling voor de hoofdoutput.
 */
const std::string& T(const std::string& key) {
    if (g_translations.count(g_current_lang) && g_translations.at(g_current_lang).count(key)) {
        return g_translations.at(g_current_lang).at(key);
    }
    if (g_translations.count("en") && g_translations.at("en").count(key)) {
        return g_translations.at("en").at(key);
    }
    static const std::string fallback_key = key; 
    return fallback_key;
}

/**
 * Zoek de vertaling voor de log output.
 */
const std::string& T_log(const std::string& key, const std::string& log_lang) {
    if (g_translations.count(log_lang) && g_translations.at(log_lang).count(key)) {
        return g_translations.at(log_lang).at(key);
    }
    if (g_translations.count("en") && g_translations.at("en").count(key)) {
        return g_translations.at("en").at(key);
    }
    static const std::string fallback_key = key; 
    return fallback_key;
}


// =========================================================================
// 2. STRUCTUREN EN ENUMS (ONGEDEF)
// =========================================================================

enum class Action {
    None, Copy, Move, Delete, Test 
};

enum class CollisionStrategy {
    Number,           
    Replace,          
    Skip,             
    Interactive       
};

enum class InteractiveAction {
    Ask,               
    SkipSingle,        
    SkipAll,           
    OverwriteSingle,   
    OverwriteAll,      
    Cancel             
};


struct SortOptions {
    Action action = Action::Test; 
    string mime_types = "";
    bool recursive = false;
    CollisionStrategy collision_strategy = CollisionStrategy::Number;
    string rename_format = "original";
    string dirs_format = "original";
    string subdirs_format = "original";
    
    string extension_format = "original"; 
    
    bool verbose = false; 
    bool quiet = false;
    
    vector<string> paths;
    
    string log_lang = "nl"; 
};

// Prototypes
int execute_sort(const SortOptions& options);
string generate_new_filename(const fs::path& original_path, const SortOptions& options);

// ... (Helper functies zoals sha256_file, get_file_time_string, get_mime_type, etc. zijn weggelaten)

// Functie voor MIME-filtering (simulatie van implementatie)
bool matches_mime_filter(const fs::path& path, const string& filter_string) {
    if (filter_string.empty()) return true;
    return true; 
}

// Functie om nieuwe bestandsnaam (stam) te bepalen (simulatie van implementatie)
string generate_new_filename(const fs::path& original_path, const SortOptions& options) {
    if (options.rename_format == "original" || options.rename_format.empty()) {
        return original_path.filename().string(); 
    }
    return options.rename_format + original_path.extension().string(); 
}

// =========================================================================
// 3. INTERACTIEVE FUNCTIES
// =========================================================================

/**
 * Vraagt de gebruiker om een actie te kiezen bij een botsing.
 */
InteractiveAction handle_interactive_collision(
    const fs::path& source, 
    const fs::path& target
) {
    cout << "\n" << T("MSG_COLLISION_TITLE") << " üí•" << endl;
    cout << T("MSG_COLLISION_SRC") << source.filename().string() << endl;
    cout << T("MSG_COLLISION_DST") << target.filename().string() << T("MSG_COLLISION_EXISTS") << endl;
    cout << T("MSG_COLLISION_PROMPT");
    
    string input;
    if (getline(cin, input) && !input.empty()) {
        char choice = tolower(input[0]);
        // Controle op de eerste letter (NL/EN/DE/FR/RU/TR)
        if (choice == 'a' || choice == 'c' || choice == 'o') { 
            return InteractiveAction::Cancel; // Annuleren/Cancel/Otmena
        } else if (choice == 'o' || choice == 's' || choice == 'p' || choice == 'i') { 
            if (input.size() > 1 && (tolower(input[1]) == 'a' || tolower(input[1]) == 'l' || tolower(input[1]) == 'g')) { 
                return InteractiveAction::SkipAll;
            }
            return InteractiveAction::SkipSingle;
        } else if (choice == 'v' || choice == 'r' || choice == 'z' || choice == 'e' || choice == 'y') { 
            if (input.size() > 1 && (tolower(input[1]) == 'a' || tolower(input[1]) == 'l' || tolower(input[1]) == 'n' || tolower(input[1]) == 't')) { 
                return InteractiveAction::OverwriteAll;
            }
            return InteractiveAction::OverwriteSingle;
        }
    }
    return InteractiveAction::SkipSingle; 
}

// =========================================================================
// 4. HOOFDLOGICA FUNCTIES
// =========================================================================

/**
 * Verwerkt een enkel bestand. Geeft 1 terug bij succes, 0 anders.
 */
int process_file(
    const fs::path& source_path, 
    const SortOptions& options, 
    InteractiveAction& current_interactive_action, 
    bool& execution_cancelled                      
) {
    if (execution_cancelled) return 0;
    
    auto log = [&](const string& message) {
        if (options.verbose && !options.quiet) {
            cout << message << endl;
        }
    };
    
    string action_sym;
    bool simulation = false;
    
    switch (options.action) {
        case Action::Copy: action_sym = T_log("MSG_COPYING", options.log_lang); break;
        case Action::Move: action_sym = T_log("MSG_MOVING", options.log_lang); break;
        case Action::Delete: action_sym = T_log("MSG_DELETING", options.log_lang); break;
        case Action::Test: 
        default: 
            action_sym = "üî¨ SIMULATION"; 
            simulation = true; 
            break;
    }

    if (options.action == Action::Delete) {
        if (!simulation) { /* fs::remove(source_path); */ }
        log(action_sym + ": " + source_path.string());
        return 1;
    }

    string new_filename = generate_new_filename(source_path, options);
    fs::path target_dir = "/tmp/SortedFiles/"; 

    fs::path target_path = target_dir / new_filename;
    
    CollisionStrategy current_strategy = options.collision_strategy;

    if (fs::exists(target_path) && !simulation) { 
        
        if (options.collision_strategy == CollisionStrategy::Interactive) {
            
            InteractiveAction chosen_action = current_interactive_action;

            if (chosen_action == InteractiveAction::Ask || chosen_action == InteractiveAction::SkipSingle || chosen_action == InteractiveAction::OverwriteSingle) {
                chosen_action = handle_interactive_collision(source_path, target_path);
                current_interactive_action = chosen_action;
            }
            
            if (chosen_action == InteractiveAction::SkipSingle || chosen_action == InteractiveAction::SkipAll) {
                current_strategy = CollisionStrategy::Skip;
            } else if (chosen_action == InteractiveAction::OverwriteSingle || chosen_action == InteractiveAction::OverwriteAll) {
                current_strategy = CollisionStrategy::Replace;
            } else if (chosen_action == InteractiveAction::Cancel) {
                execution_cancelled = true;
                return 0;
            } else {
                 current_strategy = CollisionStrategy::Number;
            }
        } 

        if (current_strategy == CollisionStrategy::Replace) {
            if (!simulation) { /* fs::remove(target_path); */ }
            log("  > " + T_log("MSG_OVERWRITE_OK", options.log_lang));
        } else if (current_strategy == CollisionStrategy::Skip) {
            log("  > " + T_log("MSG_SKIP_OK", options.log_lang));
            return 0; 
        } else { 
            // Nummering (CollisionStrategy::Number)
            int counter = 1;
            fs::path numbered_path;
            do {
                numbered_path = target_dir / (target_path.stem().string() + "-" + std::to_string(counter++) + target_path.extension().string());
            } while (fs::exists(numbered_path));
            target_path = numbered_path;
            log("  > " + T_log("MSG_RENAME_OK", options.log_lang) + target_path.filename().string());
        }
    }

    if (options.action == Action::Test) {
        cout << "üß™ TEST: " << source_path.string() << " >> " << target_path.string() << endl;
    }
    else if (options.action == Action::Copy || options.action == Action::Move) {
        // ... (Simulatie van fs::copy of fs::rename)
        log("  > " + action_sym + " to " + target_path.string());
    }

    return 1;
}

/**
 * Loop door alle paden en bestanden.
 */
int execute_sort(const SortOptions& options) {
    int processed_count = 0;
    
    InteractiveAction current_interactive_action = InteractiveAction::Ask;
    bool execution_cancelled = false;

    for (const auto& path_str : options.paths) {
        if (execution_cancelled) break;
        fs::path entry_path(path_str);

        if (!fs::exists(entry_path)) {
            if (!options.quiet) { 
                cerr << T("MSG_PATH_NOT_FOUND") << path_str << endl;
            }
            continue;
        }
        
        if (options.action == Action::Delete) {
             processed_count += process_file(entry_path, options, current_interactive_action, execution_cancelled);
             continue;
        }

        auto process_entry = [&](const fs::path& current_path) {
            if (execution_cancelled) return;

            if (fs::is_regular_file(current_path)) {
                if (matches_mime_filter(current_path, options.mime_types)) {
                    processed_count += process_file(current_path, options, current_interactive_action, execution_cancelled);
                } else {
                    if (options.verbose && !options.quiet) { 
                        cout << "  > " << T_log("MSG_FILE_FILTERED", options.log_lang) << current_path.filename().string() << endl;
                    }
                }
            }
        };

        if (fs::is_directory(entry_path)) {
            if (options.verbose && !options.quiet) { cout << T_log("MSG_PROCESSING_DIR", options.log_lang) << path_str << (options.recursive ? " (recursive)" : "") << endl; }
            if (options.recursive) {
                for (const auto& entry : fs::recursive_directory_iterator(entry_path)) {
                    if (execution_cancelled) break;
                    process_entry(entry.path());
                }
            } else {
                for (const auto& entry : fs::directory_iterator(entry_path)) {
                    if (execution_cancelled) break;
                    process_entry(entry.path());
                }
            }
        } else if (fs::is_regular_file(entry_path)) {
            process_entry(entry_path);
        }
    }

    return processed_count;
}

// =========================================================================
// 5. PRINT HELP FUNCTIE
// =========================================================================

/**
 * Drukt de helptekst af in de opgegeven taal.
 */
void print_help(const std::string& lang_code) {
    // Lokale lambda functie om vertaling op te halen met de gevraagde taalcode
    auto T_help = [&](const string& key) -> const string& {
        if (g_translations.count(lang_code) && g_translations.at(lang_code).count(key)) {
            return g_translations.at(lang_code).at(key);
        }
        if (g_translations.count("en") && g_translations.at("en").count(key)) {
            return g_translations.at("en").at(key);
        }
        static const string fallback = key;
        return fallback;
    };

    cout << T_help("MSG_USAGE");
    cout << T_help("MSG_ACTIONS");
    cout << "  --Test          (üî¨ " << T_help("MSG_DESC_TEST") << ")\n"
         << "  --Copy          (üìã " << T_help("MSG_DESC_COPY") << ")\n"
         << "  --Move          (üöö " << T_help("MSG_DESC_MOVE") << ")\n"
         << "  --Delete        (üóëÔ∏è " << T_help("MSG_DESC_DELETE") << ")\n";
    cout << T_help("MSG_OPTIONS");
    cout << "  --Type=[mimes]  (" << T_help("MSG_DESC_TYPE") << ")\n"
         << "  --Extension=[f] (" << T_help("MSG_DESC_EXTENSION") << ")\n"
         << "  --Rename=[f]    (" << T_help("MSG_DESC_RENAME") << ")\n"
         << "  --Recursive     (üîÑ " << T_help("MSG_DESC_RECURSIVE") << ")\n"
         << "  --Lang=[xx]     (üåê " << T_help("MSG_DESC_LANG") << ")\n";
    cout << "  --Verbose       (‚ûï " << T_help("MSG_DESC_VERBOSE") << ")\n"
         << "  --Verbose=[xx]  (‚ûï " << T_help("MSG_DESC_VERBOSE_LANG") << ")\n"; 
    cout << "  --Help          (‚ùì " << T_help("MSG_DESC_HELP") << ")\n"
         << "  --Help=[xx]     (‚ùì " << T_help("MSG_DESC_HELP_LANG") << ")\n";
    cout << T_help("MSG_COLLISION");
    cout << "  --Replace       (üîÑ " << T_help("MSG_DESC_REPLACE") << ")\n"
         << "  --Skip          (‚è≠Ô∏è " << T_help("MSG_DESC_SKIP") << ")\n"
         << "  (" << T_help("MSG_DEFAULT_COLLISION") << ")\n";
    cout << T_help("MSG_FEEDBACK");
    cout << "  --Quiet         (‚ûñ " << T_help("MSG_DESC_QUIET") << ")\n"
         << "  --Dirs=[f] (" << T_help("MSG_DESC_TBD") << ")\n"
         << "  --SubDirs=[f] (" << T_help("MSG_DESC_TBD") << ")\n"
         << endl;
}

// =========================================================================
// 6. MAIN FUNCTIE (Parsing)
// =========================================================================

int main(int argc, char* argv[]) {
    if (argc < 2) {
        print_help(g_current_lang);
        return 1;
    }

    SortOptions options;
    bool explicit_collision_strategy = false;

    // EERSTE PARSING LUS: Verwerk directe opdrachten zoals --Help en --Lang (voor de helptekst)
    for (int i = 1; i < argc; ++i) {
        string arg = argv[i];
        
        if (arg.rfind("--Lang=", 0) == 0) {
            g_current_lang = arg.substr(7);
            if (g_translations.find(g_current_lang) == g_translations.end()) {
                g_current_lang = "nl"; 
            }
        } 
        
        // HULP OPROEP IN SPECIFIEKE TAAL OF STANDAARD
        if (arg.rfind("--Help=", 0) == 0) {
            string help_lang = arg.substr(7);
            print_help(help_lang);
            return 0; 
        } else if (arg == "--Help") {
             print_help(g_current_lang);
             return 0; 
        }
    }
    
    // TWEEDE PARSING LUS: Verwerk alle uitvoerende argumenten
    for (int i = 1; i < argc; ++i) {
        string arg = argv[i];

        if (arg == "--Copy") {
            options.action = Action::Copy;
        } else if (arg == "--Move") {
            options.action = Action::Move;
        } else if (arg == "--Delete") {
            options.action = Action::Delete;
        } else if (arg == "--Test") {
            options.action = Action::Test;
        } else if (arg == "--Recursive") {
            options.recursive = true;
        } else if (arg == "--Replace") {
            options.collision_strategy = CollisionStrategy::Replace;
            explicit_collision_strategy = true;
        } else if (arg == "--Skip") {
            options.collision_strategy = CollisionStrategy::Skip;
            explicit_collision_strategy = true;
        } else if (arg == "--Verbose") {
            options.verbose = true;
            options.log_lang = "en"; 
        } else if (arg.rfind("--Verbose=", 0) == 0) {
            options.verbose = true;
            options.log_lang = arg.substr(10);
            if (g_translations.find(options.log_lang) == g_translations.end()) {
                options.log_lang = "en"; 
            }
        } else if (arg == "--Quiet") {
            options.quiet = true;
        } else if (arg.rfind("--Lang=", 0) == 0) {
            // Reeds verwerkt in lus 1, maar moet hier de globale taal bijwerken
            // Logische synchronisatie is vereist
        } else if (arg.rfind("--Type=", 0) == 0) {
            options.mime_types = arg.substr(7);
        } else if (arg.rfind("--Rename=", 0) == 0) {
            options.rename_format = arg.substr(9);
        } else if (arg.rfind("--Extension=", 0) == 0) { 
            options.extension_format = arg.substr(12);
        } else if (arg.rfind("--Dirs=", 0) == 0) {
            options.dirs_format = arg.substr(7);
        } else if (arg.rfind("--SubDirs=", 0) == 0) {
            options.subdirs_format = arg.substr(10);
        } else if (arg.rfind("--", 0) != 0) {
            options.paths.push_back(arg);
        } else {
            cerr << T("MSG_UNKNOWN_OPT") << arg << endl;
            return 1;
        }
    }

    // Synchronisatie van Logtaal als geen expliciete --Verbose werd gebruikt
    if (!options.verbose) {
        options.log_lang = g_current_lang;
    }

    if (options.quiet) {
        options.verbose = false;
    }
    
    bool rename_is_literal = (
        options.rename_format != "original" && 
        options.rename_format != "sha256sum" && 
        options.rename_format != "modified-date" && 
        options.rename_format != "modified-time"
    );
    
    if (rename_is_literal && !explicit_collision_strategy && options.action != Action::Test) {
         options.collision_strategy = CollisionStrategy::Interactive;
    }

    
    try {
        string action_sym;
        switch (options.action) {
            case Action::Copy: action_sym = "üìã Copy"; break;
            case Action::Move: action_sym = "üöö Move"; break;
            case Action::Delete: action_sym = "üóëÔ∏è Delete"; break;
            case Action::Test: action_sym = "üî¨ TEST (Simulation)"; break;
            default: action_sym = "‚ùì Unknown"; break;
        }

        if (!options.quiet) {
            cout << "‚ú® " << T("MSG_START_ACTION") << action_sym << endl;
        }
        
        int files_processed = execute_sort(options);
        
        if (!options.quiet) {
             if (files_processed > 0 || options.paths.empty()) {
                cout << T("MSG_FINISHED") << files_processed << T("MSG_FILES_PROCESSED") << endl;
            } else {
                cout << T("MSG_CANCELED") << endl; 
            }
        }

    } catch (const exception& e) {
        cerr << T("MSG_FATAL_ERROR") << e.what() << endl;
        return 1;
    }

    return 0;
}
